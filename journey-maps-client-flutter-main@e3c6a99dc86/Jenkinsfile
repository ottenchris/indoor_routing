#!/usr/bin/env groovy

pipeline {
    agent none
    parameters {
         booleanParam(
            name: 'make_release',
            defaultValue: false,
            description: 'Release example app (only available on main branch).')
    }
    stages {
        stage('TestLib') {
            matrix {
                agent { label 'macos' }
                tools { jdk 'JDK 17' }
                axes {
                    axis {
                        name 'FLUTTER_SDK'
                        values '3.22.2', '3.16.5' // adapt these with the env vars below
                    }
                }
                environment {
                    // Android
                    SIGNING_KEY_ALIAS = 'sbb_map_flutter_example_upload'
                    SIGNING_KEY_PASSWORD = credentials('MOBILE-sbb-maps-flutter-example-app-signing-key-password')
                    SIGNING_KEYSTORE_PASSWORD = credentials('MOBILE-sbb-maps-flutter-example-app-signing-key-password')
                    SIGNING_KEYSTORE_FILE = credentials('MOBILE-sbb-maps-flutter-example-keystore-file')

                    // iOS Developer Program
                    TEAM_PROFILE = 'sbb_enterprise'

                    // Credentials
                    KEYCHAIN_PASSWORD = credentials('MOBILE-keychain-password')
                    FASTLANE_PASSWORD = credentials('MOBILE-fastlane-password')
                    MOBILEIRON_CREDENTIALS = credentials('MOBILE-mobileiron-credentials')

                    // Flutter
                    FLUTTER_ENABLE_BUILD_RUNNER = 'false'
                    FLUTTER_FLAVOR_USE_GOOGLE_SERVICES = 'false'
                    FLUTTER_IPA_PREFIX = 'journeyMapsClientFlutter_'

                    // SDK Config
                    FLUTTER_LATEST_SDK = '3.22.2'
                    FLUTTER_OLDEST_SDK = '3.16.5'

                    // Artifactory for iOS
                    ARTIFACTORY_CREDENTIALS = credentials('MOBILE-artifactory-credentials')
                    BIN_REPO_ID = 'ci-mobile-journeymapsclient.ios'
                    BIN_GROUP_ID = 'ch/sbb/rokas/journeymapsclient-flutter'
                }
                stages {
                    stage('Build Lib') {
                        steps {
                            sh 'fvm install ${FLUTTER_SDK} --setup'
                            sh 'fvm use ${FLUTTER_SDK} --skip-pub-get'
                            sh 'fvm flutter pub get'
                            sh 'fvm flutter packages pub run build_runner build --delete-conflicting-outputs'
                        }
                    }
                    stage('Test Lib') {
                        steps {
                          sh 'fvm flutter test --coverage --coverage-path coverage/lcov-unit-test.info'  
                        }
                    }
                    stage('Stash Coverage in Latest SDK') {
                        when {
                            expression { env.FLUTTER_SDK == env.FLUTTER_LATEST_SDK }
                        }
                        steps {
                            stash name: 'lcov-unit-test', includes: 'coverage/lcov-unit-test.info'
                        }
                    }
                    stage('Prepare example app.') {
                        when {
                            anyOf {
                                expression { env.CHANGE_ID && env.BRANCH_NAME.startsWith("PR-") } // Pull requests
                                allOf {
                                    expression { return params.make_release }
                                    branch 'main'
                                }
                            }
                        }
                        steps {
                            dir('example') {
                                withCredentials([file(credentialsId: 'MOBILE-flutter-example-app-env-file-file', variable: 'SECRETENV')]) {
                                    sh "cp \$SECRETENV \$PWD/.env"
                                    sh 'fvm flutter pub get'
                                    sh 'fvm flutter packages pub run build_runner build --delete-conflicting-outputs'
                                }
                            }
                        }
                    }
                    stage('Build apk') {
                        when {
                            anyOf {
                                expression { env.CHANGE_ID && env.BRANCH_NAME.startsWith("PR-") } // Pull requests
                                allOf {
                                    expression { env.FLUTTER_SDK == env.FLUTTER_LATEST_SDK }
                                    expression { return params.make_release }
                                    branch 'main'
                                }
                            }
                        }
                        steps {
                            dir('example') {
                                sh 'fvm flutter build appbundle -t lib/main.dart --no-pub'
                            }
                        }
                    }
                    stage('Upload Android') {
                        when {
                            allOf {
                                expression { env.FLUTTER_SDK == env.FLUTTER_LATEST_SDK }
                                expression { return params.make_release }
                                branch 'main'
                            }
                        }
                        steps {
                            dir('example/build') {
                                rtUpload(
                                    serverId: "${env.BIN_SERVER_ID}",
                                    project: "${env.BIN_PROJECT}",
                                    spec:
                                        '''{
                                            "files": [
                                                {
                                                "pattern": "ch/sbb/rokas/flutter/*.aab",
                                                "target": "ci-mobile-journeymapsclient.mvn/",
                                                "flat": "false"
                                                }
                                            ]
                                        }'''
                                )
                            }
                        }
                    }
                    stage('Publish to Play Store') {
                        when {
                            allOf {
                                expression { env.FLUTTER_SDK == env.FLUTTER_LATEST_SDK }
                                expression { return params.make_release }
                                branch 'main'
                            }
                        }
                        steps {
                            dir(path: 'example/android') {
                                withCredentials([file(credentialsId: 'MOBILE-sbb-maps-flutter-example-sa-playstore-json-file', variable: 'PUBLISH_PLAYSTORE_SA')]) {
                                    sh "./gradlew publishBundle -PPLAY_STORE_SERVICE_ACCOUNT_JSON=${PUBLISH_PLAYSTORE_SA} -Dorg.gradle.daemon=false"
                                }
                            }
                        }
                    }
                    stage('Build iOS app') {
                        when {
                            anyOf {
                                expression { env.CHANGE_ID && env.BRANCH_NAME.startsWith("PR-") } // Pull requests
                                allOf {
                                    expression { env.FLUTTER_SDK == env.FLUTTER_LATEST_SDK }
                                    expression { return params.make_release }
                                    branch 'main'
                                }
                            }
                        }
                        steps {
                            dir('example') {
                                sh 'fvm flutter build ios -t lib/main.dart --no-codesign --no-pub'
                            }
                        }
                    }
                    stage('Release iOS app') {
                        when {
                            allOf {
                                expression { env.FLUTTER_SDK == env.FLUTTER_LATEST_SDK }
                                expression { return params.make_release }
                                branch 'main'
                            }
                        }
                        steps {
                            dir('example/ios') {
                                fastlane lane: 'flutter_enterprise_build', scheme: 'Runner', app_identifier: 'ch.sbb.SBBJourneyMapsFlutterDemo', repo_artifact_id: 'sbbJourneyMapsClient'
                                fastlane lane: 'upload_mobileiron'
                            }
                        }
                    }
                }
            }
        }
        stage('Sonar') {
            when {
                beforeAgent true
                not {
                    expression { env.CHANGE_ID || env.BRANCH_NAME.startsWith("PR-") } // Pull requests
                }
                not {
                    expression { return params.make_release }
                }
            }
            agent {
              label 'macos'
            }
            environment {
                SONARQUBE_KEY = credentials('MOBILE-sonarqube-token')
            }
            steps {
              unstash 'lcov-unit-test'
              sh 'lcov -a coverage/lcov-unit-test.info -o coverage/lcov.info'
              sh 'sonar-scanner -Dsonar.login=$SONARQUBE_KEY -Dsonar.branch.name=$GIT_BRANCH'
            }
      	}
    }
    post {
        failure {
            node(null)
            archiveArtifacts artifacts: '**/*.log'
            emailext(
                    subject: "Build failed in Jenkins: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: "See ${env.BUILD_URL}",
                    recipientProviders: [[$class: 'DevelopersRecipientProvider']]
            )
        }
    }
}
